# NÃO SEI SE É PARA USAR ISTO OU NÃO AJUDA

# Path to the folder where the audio files are located
base_path = 'C:/Users/aleja/OneDrive/Documentos/GitHub/AC-II/UrbanSound8K/audio'

# Parameters for MFCC extraction
sample_rate = 22050  # Consistent sample rate for all files
n_mfcc = 13          # Number of MFCC features to extract
target_duration = 4.0  # Target duration for each audio clip in seconds

# List to store MFCC features and file names
mfcc_features = []
file_names = []

# Loop through the 10 folds
for fold in range(1, 11):
    fold_path = os.path.join(base_path, f'fold{fold}')
    
    # Check if the folder path exists
    if os.path.exists(fold_path):
        print(f"\nExtracting MFCCs from files in {fold_path}...")
        
        # Loop through the audio files within the fold
        for file_name in os.listdir(fold_path):
            if file_name.endswith('.wav'):
                # Full path to the audio file
                file_path = os.path.join(fold_path, file_name)
                
                # Load audio with librosa
                audio, sr = librosa.load(file_path, sr=sample_rate)
                
                # Ensure audio length is consistent with target duration
                if len(audio) < target_duration * sample_rate:
                    padding = int(target_duration * sample_rate) - len(audio)
                    audio = np.pad(audio, (0, padding), mode='constant')
                else:
                    audio = audio[:int(target_duration * sample_rate)]
                
                # Extract MFCCs
                mfcc = librosa.feature.mfcc(y=audio, sr=sr, n_mfcc=n_mfcc)
                mfcc_mean = np.mean(mfcc, axis=1)  # Mean over time to get a fixed-size vector
                
                # Store MFCCs and file name
                mfcc_features.append(mfcc_mean)
                file_names.append(file_name)

# Convert MFCC features to DataFrame
df = pd.DataFrame(mfcc_features)
df.columns = [f'MFCC_{i+1}' for i in range(n_mfcc)]  # Name columns as MFCC_1, MFCC_2, etc.
df.insert(0, 'file_name', file_names)  # Insert file names as the first column

# Normalize MFCC features
scaler = MinMaxScaler()
df.iloc[:, 1:] = scaler.fit_transform(df.iloc[:, 1:])  # Normalize all MFCC columns (excluding file_name)

# Save to CSV
df.to_csv('mfcc_features_normalized.csv', index=False)
print("MFCC features extracted, normalized, and saved to 'mfcc_features_normalized.csv'.")



The provided code returns a 2D array where each row represents an MFCC and each column corresponds to a time frame calculates the mean of each MFCC across time, creating a fixed-size feature vector per audio clip. This step is optional but often used to simplify the features.